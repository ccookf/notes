#!/usr/bin/env node

/**
 * Module dependencies.
 */

var express = require('express');
var app = require('../app');
var httpApp = express();
var debug = require('debug')('notes:server');
var fs = require('fs');
var http = require('http');
var https = require('https');

/**
 * Get port from environment and store in Express.
 */

var port;
if (process.env.NODE_ENV == 'production') port = 8000;
else port = 443;
app.set('port', port);

//HTTP server port & traffic redirect to https server which houses the actual app
httpApp.set('port', 3000);
httpApp.get('*', function(req, res, next)
{
    console.log('http request for %s %s', req.hostname, req.path);
    res.redirect("https://" + req.hostname + req.path);
});

/**
 * Create the node server
 */

//for http server
var http_server = http.createServer(httpApp).listen(httpApp.get('port'));

//for https server, I'm really not sure what the deal with the certificates I was given are
var server = https.createServer({
    key: fs.readFileSync('ccookf.key'),
    cert: fs.readFileSync('2_www.ccookf.com.crt')
}, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
